create or replace package ut_pit 
  authid current_user
as

  /* generated by utPLSQL for SQL Developer on 2020-03-20 15:03:11 */
  
  procedure set_result(
    p_log in boolean default null,
    p_enter in boolean default false,
    p_leave in boolean default false,
    p_print in boolean default false,
    p_notify in boolean default false,
    p_context_changed in boolean default false,
    p_message in message_type default null,
    p_call_stack in call_stack_type default null,
    p_context in pit_context default null);

  --%suite(PIT tests)
  --%suitepath(ut_pit)

  --%beforeall
  procedure before_all;
  
  --%beforeeach
  procedure before_each;
  
  --%afterall
  procedure after_all;
  
  --%aftereach
  procedure after_each;
  

  --%context(Method LOG)

  --%test(logs regardless of log settings)
  procedure log_normal_execution;

  --%test(logs even if module was not set before)
  procedure log_not_set_before;

  --%test(logs as second module)
  procedure log_as_second_module;

  --%test(passes error_code if set)
  procedure log_passes_error_code;

  --%test(does not log if threshold is set higher than message severity)
  procedure log_filters_threshold;

  --%test(logs if threshold is set equal to message severity)
  procedure log_passes_threshold;

  --%test(passes affected_id if set)
  procedure log_passes_affected_id;

  --%endcontext

  --%context(Method SQL_EXCEPTION)

  --%test(captures an error)
  procedure sql_exception_captures_error;

  --%test(passes a predefined message)
  procedure sql_exception_passes_message;

  --%test(passes error_code if set)
  procedure sql_exception_passes_error_code;

  --%test(passes affected_id if set)
  procedure sql_exception_passes_affected_id;

  --%test(closes any ENTER-calls)
  procedure sql_exception_closes_stack;

  --%endcontext

  --%context(Method STOP)

  --%test(throws an error)
  --%throws(msg.SQL_ERROR_ERR)
  procedure stop_throws_error;

  --%test(passes a predefined message)
  procedure stop_passes_message;

  --%test(passes error_code if set)
  procedure stop_passes_error_code;

  --%test(passes affected_id if set)
  procedure stop_passes_affected_id;

  --%test(closes any ENTER-calls)
  procedure stop_closes_stack;

  --%test(closes all ENTER-calls)
  procedure stop_closes_stack_completely;

  --%endcontext
  --%context(Method ENTER)

  --%test(raises ENTER event on output modules)
  procedure enter_normally;

  --%test(Methods ENTER_... raise ENTER events on output modules only if parameterized)
  procedure enter_level;

  --%test(passes parameters to output modules)
  procedure enter_passes_parameters;

  --%test(_MANDATORY sets client_info column)
  procedure enter_mandatory_sets_client_info;

  --%test(Methods ENTER_... set module and action automatically)
  procedure enter_sets_module_action;

  --%endcontext

  --%context(Method LEAVE)

  --%test(raises LEAVE event on output modules)
  procedure leave_normally;

  --%test(Methods LEAVE_... raise LEAVE events on output modules only if parameterized)
  procedure leave_level;

  --%test(passes parameters to output modules)
  procedure leave_passes_parameters;

  --%test(Methods LEAVE_... resets module and action automatically)
  procedure leave_resets_module_action;

  --%endcontext

  --%context(Method LONG_OP)

  --%test(derives OP_NAME from call stack
  procedure long_op_opname;

  --%test(may be used only after having called PIT.ENTER)
  --%throws(msg.LONG_OP_WO_TRACE_ERR)
  procedure long_op_requires_enter;

  --%test(works even if PIT.ENTER was used in a wrapping method)
  procedure long_op_nested;

  --%endcontext

  --%context(Method PRINT)

  --%test(passes any message to the output modules)
  procedure print_normal_execution;

  --%test(emits a warning if no message name is passed in)
  procedure print_null_message;

  --%endcontext

  --%context(Method NOTIFY)

  --%test(passes notfication regardless of log settings)
  procedure notify_normal_execution;

  --%test(passes notfication even if module was not set before)
  procedure notify_not_set_before;

  --%test(passes notfication as second module)
  procedure notify_as_second_module;

  --%test(does not pass notfication if threshold is set higher than message severity)
  procedure notify_filters_threshold;

  --%test(passes notfication if threshold is set equal to message severity)
  procedure notify_passes_threshold;

  --%test(passes affected_id if set)
  procedure notify_passes_affected_id;

  --%endcontext

  --%context(Getter Methods)

  --%test(get_message_text returns a message text)
  procedure get_message_text;

  --%test(get_message returns an instance of type MESSAGE_TYPE)
  procedure get_message;
  
  --%test(get_active_message returns the lastly created instance of type MESSAGE_TYPE)
  procedure get_active_message;

  --%endcontext

  --%context(Method ASSERT)

  --%test(does not throw an error if condition is met)
  procedure assert_no_error;

  --%test(throws the exception passed in if the condition is not met)
  --%throws(msg.SQL_ERROR_ERR)
  procedure assert_with_error;

  --%test(throws an error if the condition entered is NULL)
  --%throws(msg.SQL_ERROR_ERR)
  procedure assert_null_throws_error;

  --%test(delivers the affected id passed in if the condition is not met)
  procedure assert_passes_affected_id;

  --%test(delivers the error code passed in if the condition is not met)
  procedure assert_passes_error_code;

  --%endcontext

  --%context(Method ASSERT_IS_NULL)

  --%test(does nothing if the value passed in is NULL)
  procedure assert_is_null_no_error;

  --%test(throws an error if a non NULL string is passed in)
  --%throws(msg.SQL_ERROR_ERR)
  procedure assert_is_null_char_with_error;

  --%test(throws an error if a non NULL number is passed in)
  --%throws(msg.SQL_ERROR_ERR)
  procedure assert_is_null_number_with_error;

  --%test(throws an error if a non NULL date is passed in)
  --%throws(msg.SQL_ERROR_ERR)
  procedure assert_is_null_date_with_error;

  --%endcontext

  --%context(Method ASSERT_NOT_NULL)

  --%test(does nothing if a non NULL string is passed in)
  procedure assert_not_null_char_no_error;

  --%test(does nothing if a non NULL number is passed in)
  procedure assert_not_null_number_no_error;

  --%test(does nothing if a non NULL date is passed in)
  procedure assert_not_null_date_no_error;

  --%test(throws an error if NULL is passed in)
  --%throws(msg.SQL_ERROR_ERR)
  procedure assert_not_null_with_error;

  --%endcontext
  /*
  --%context(get_trans_item_name)

  --%test
  procedure get_trans_item_name1;

  --%test
  procedure get_trans_item_name2;

  --%test
  procedure get_trans_item_name3;

  --%test
  procedure get_trans_item_name4;

  --%test
  procedure get_trans_item_name5;

  --%endcontext

  --%context(get_trans_item_display_name)

  --%test
  procedure get_trans_item_display_name1;

  --%test
  procedure get_trans_item_display_name2;

  --%test
  procedure get_trans_item_display_name3;

  --%test
  procedure get_trans_item_display_name4;

  --%test
  procedure get_trans_item_display_name5;

  --%endcontext

  --%context(get_trans_item_description)

  --%test
  procedure get_trans_item_description1;

  --%test
  procedure get_trans_item_description2;

  --%test
  procedure get_trans_item_description3;

  --%test
  procedure get_trans_item_description4;

  --%test
  procedure get_trans_item_description5;

  --%endcontext

  --%context(get_trans_item)

  --%test
  procedure get_trans_item1;

  --%test
  procedure get_trans_item2;

  --%test
  procedure get_trans_item3;

  --%test
  procedure get_trans_item4;

  --%test
  procedure get_trans_item5;

  --%endcontext

  --%context(purge_log)

  --%test
  procedure purge_log1;

  --%test
  procedure purge_log2;

  --%test
  procedure purge_log3;

  --%test
  procedure purge_log4;

  --%test
  procedure purge_log5;

  --%endcontext

  --%context(purge_session_log)

  --%test
  procedure purge_session_log1;

  --%test
  procedure purge_session_log2;

  --%test
  procedure purge_session_log3;

  --%test
  procedure purge_session_log4;

  --%test
  procedure purge_session_log5;

  --%endcontext

  --%context(set_context)

  --%test
  procedure set_context1;

  --%test
  procedure set_context2;

  --%test
  procedure set_context3;

  --%test
  procedure set_context4;

  --%test
  procedure set_context5;

  --%endcontext

  --%context(reset_context)

  --%test
  procedure reset_context1;

  --%test
  procedure reset_context2;

  --%test
  procedure reset_context3;

  --%test
  procedure reset_context4;

  --%test
  procedure reset_context5;

  --%endcontext

  --%context(start_message_collection)

  --%test
  procedure start_message_collection1;

  --%test
  procedure start_message_collection2;

  --%test
  procedure start_message_collection3;

  --%test
  procedure start_message_collection4;

  --%test
  procedure start_message_collection5;

  --%endcontext

  --%context(stop_message_collection)

  --%test
  procedure stop_message_collection1;

  --%test
  procedure stop_message_collection2;

  --%test
  procedure stop_message_collection3;

  --%test
  procedure stop_message_collection4;

  --%test
  procedure stop_message_collection5;

  --%endcontext

  --%context(get_message_collection)

  --%test
  procedure get_message_collection1;

  --%test
  procedure get_message_collection2;

  --%test
  procedure get_message_collection3;

  --%test
  procedure get_message_collection4;

  --%test
  procedure get_message_collection5;

  --%endcontext

  --%context(get_modules)

  --%test
  procedure get_modules1;

  --%test
  procedure get_modules2;

  --%test
  procedure get_modules3;

  --%test
  procedure get_modules4;

  --%test
  procedure get_modules5;

  --%endcontext

  --%context(get_available_modules)

  --%test
  procedure get_available_modules1;

  --%test
  procedure get_available_modules2;

  --%test
  procedure get_available_modules3;

  --%test
  procedure get_available_modules4;

  --%test
  procedure get_available_modules5;

  --%endcontext

  --%context(get_active_modules)

  --%test
  procedure get_active_modules1;

  --%test
  procedure get_active_modules2;

  --%test
  procedure get_active_modules3;

  --%test
  procedure get_active_modules4;

  --%test
  procedure get_active_modules5;

  --%endcontext

  --%context(initialize)

  --%test
  procedure initialize1;

  --%test
  procedure initialize2;

  --%test
  procedure initialize3;

  --%test
  procedure initialize4;

  --%test
  procedure initialize5;

  --%endcontext
*/
end ut_pit;
/
