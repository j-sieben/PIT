create or replace package body ut_pit_call_stack 
as

  /* generated by utPLSQL for SQL Developer on 2021-11-21 10:27:30 */
  
  g_module pit_util.ora_name_type;
  g_action pit_util.ora_name_type;
  g_user_name pit_util.ora_name_type;
  g_client_info pit_util.ora_name_type;
  g_trace_level binary_integer;
  g_params msg_params;
  g_call_stack pit_call_stack_type;
  g_call_stack_tab pit_call_stack.pit_call_stack_tab;
  g_context pit_context_type;
    
  procedure before_all
  as
  begin
    null;
  end before_all;
  
  
  procedure before_each
  as
  begin
    pit_call_stack.initialize;
    g_module := 'FOO';
    g_action := 'MY_FUNCTION';
    g_user_name := user;
    g_client_info := '123';
    g_params := msg_params(msg_param('FOO', 'FOO'), msg_param('FOO2', 'FOO2'));
    g_trace_level := pit.TRACE_MANDATORY;
  end before_each;
  
  
  procedure after_each
  as
  begin
    null;
  end after_each;
  
  
  procedure after_all
  as
  begin
    null;
  end after_all;
  
  --
  -- test push_stack   --
  procedure push_stack 
  as
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    ut.expect(g_call_stack.module_name).to_equal(g_module);
    ut.expect(g_call_stack.call_level).to_equal(1);
  end push_stack;
  
  --
  -- test push_stack   --
  procedure push_stack_params
  as
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => sys_context('USERENV', 'SID'),
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    ut.expect(g_call_stack.module_name).to_equal(g_module);
    ut.expect(g_call_stack.method_name).to_equal(g_action);
    ut.expect(g_call_stack.app_module).to_equal(g_module);
    ut.expect(g_call_stack.app_action).to_equal(g_action);
    ut.expect(g_call_stack.call_level).to_equal(1);
    ut.expect(g_call_stack.user_name).to_equal(user);
    ut.expect(g_call_stack.client_info).to_equal(g_client_info);
    ut.expect(g_call_stack.session_id).to_equal(sys_context('USERENV', 'SID'));
    ut.expect(g_call_stack.params.count).to_equal(2);
    ut.expect(g_call_stack.wall_clock).to_be_not_null();
    ut.expect(g_call_stack.elapsed).to_equal(0);
    ut.expect(g_call_stack.elapsed_cpu).to_equal(0);
    ut.expect(g_call_stack.total).to_be_not_null();
    ut.expect(g_call_stack.total_cpu).to_equal(0);
    ut.expect(g_call_stack.total_cpu_point).to_be_not_null();
    ut.expect(g_call_stack.trace_level).to_equal(g_trace_level);
    ut.expect(g_call_stack.trace_timing).to_equal(pit_util.C_TRUE);
    ut.expect(g_call_stack.trace_context.trace_settings).to_be_not_null();
  end push_stack_params;
  
  --
  -- test push_stack   --
  procedure push_stack_twice
  as
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module || '2',
      p_action => g_action || '2',
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    ut.expect(g_call_stack.module_name).to_equal(g_module || '2');
    ut.expect(g_call_stack.call_level).to_equal(2);
  end push_stack_twice;
  
  --
  -- test pop_stack   --
  procedure pop_stack
  as
    l_context_has_changed boolean;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    g_call_stack_tab := pit_call_stack.pop_stack(
      p_params => g_params,
      p_severity => null);
      
    ut.expect(g_call_stack_tab(1).module_name).to_equal(g_module);
    ut.expect(g_call_stack_tab(1).call_level).to_equal(1);
  end pop_stack;
  
  --
  -- test push_stack   --
  procedure pop_stack_params
  as
    l_dummy number := 180;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => sys_context('USERENV', 'SID'),
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    for i in 1 .. 100000 loop
      l_dummy := sin(l_dummy) + 123;
    end loop;
      
    g_call_stack_tab := pit_call_stack.pop_stack(
      p_params => g_params,
      p_severity => null);
      
    ut.expect(g_call_stack_tab(1).module_name).to_equal(g_module);
    ut.expect(g_call_stack_tab(1).method_name).to_equal(g_action);
    ut.expect(g_call_stack_tab(1).app_module).to_equal(g_module);
    ut.expect(g_call_stack_tab(1).app_action).to_equal(g_action);
    ut.expect(g_call_stack_tab(1).call_level).to_equal(1);
    ut.expect(g_call_stack_tab(1).user_name).to_equal(user);
    ut.expect(g_call_stack_tab(1).client_info).to_equal(g_client_info);
    ut.expect(g_call_stack_tab(1).session_id).to_equal(sys_context('USERENV', 'SID'));
    ut.expect(g_call_stack_tab(1).params.count).to_equal(2);
    ut.expect(g_call_stack_tab(1).wall_clock).to_be_not_null();
    ut.expect(g_call_stack_tab(1).elapsed).to_be_greater_than(0);
    ut.expect(g_call_stack_tab(1).elapsed_cpu).to_be_greater_than(0);
    ut.expect(g_call_stack_tab(1).total).to_be_not_null();
    ut.expect(g_call_stack_tab(1).total_cpu).to_be_greater_than(0);
    ut.expect(g_call_stack_tab(1).total_cpu_point).to_be_not_null();
    ut.expect(g_call_stack_tab(1).trace_level).to_equal(g_trace_level);
    ut.expect(g_call_stack_tab(1).trace_timing).to_equal(pit_util.C_TRUE);
    ut.expect(g_call_stack_tab(1).trace_context.trace_settings).to_be_not_null();
  end pop_stack_params;
  
  --
  -- test pop_stack   --
  procedure push_twice_pop_stack
  as
    l_context_has_changed boolean;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module || '2',
      p_action => g_action || '2',
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    g_call_stack_tab := pit_call_stack.pop_stack(
      p_params => g_params,
      p_severity => null);
      
    ut.expect(g_call_stack_tab(1).module_name).to_equal(g_module || '2');
    ut.expect(g_call_stack_tab(1).call_level).to_equal(2);
  end push_twice_pop_stack;
  
  --
  -- test pop_stack   --
  procedure pop_stack_fatal
  as
    l_context_has_changed boolean;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module || '2',
      p_action => g_action || '2',
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    g_call_stack_tab := pit_call_stack.pop_stack(
      p_params => g_params,
      p_severity => pit.LEVEL_FATAL);
      
    ut.expect(g_call_stack_tab(2).module_name).to_equal(g_module);
    ut.expect(g_call_stack_tab(2).call_level).to_equal(1);
  end pop_stack_fatal;
  
  --
  -- test long_op   --
  procedure long_op
  as
    l_cursor sys_refcursor;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    pit_call_stack.long_op(
      p_target => 'UnitTest',
      p_sofar => 50,
      p_total => 100,
      p_units => 'Ticks',
      p_op_name => 'FOO.MY_FUNCTION');
      
    open l_cursor for 
      select *
        from v$session_longops
       where sid = sys_context('USERENV', 'SID')
         and sofar = 50
         and totalwork = 100;
    ut.expect(l_cursor).not_to_be_empty;
  end long_op;
  
  --
  -- test long_op   --
  procedure long_op_update
  as
    l_cursor sys_refcursor;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    pit_call_stack.long_op(
      p_sofar => 50,
      p_total => 100,
      p_target => 'Test LongOpUpdate',
      p_units => 'Ticks',
      p_op_name => null);
      
    pit_call_stack.long_op(
      p_sofar => 60,
      p_total => 100,
      p_target => null,
      p_units => null,
      p_op_name => null);
      
    pit_call_stack.long_op(
      p_sofar => 70,
      p_total => 100,
      p_target => null,
      p_units => null,
      p_op_name => null);
      
    open l_cursor for 
      select *
        from v$session_longops
       where sid = sys_context('USERENV', 'SID')
         and sofar = 70
         and totalwork = 100;
    ut.expect(l_cursor).not_to_be_empty;
  end long_op_update;
  
  --
  -- test long_op   --
  procedure long_op_params
  as
    l_cursor sys_refcursor;
  begin
    pit.set_context('debug');
    g_context := pit_context.get_toggle_context(
                   p_module => g_module, 
                   p_action => g_action);
    
    g_call_stack := pit_call_stack.push_stack(
      p_user_name => g_user_name,
      p_session_id => g_client_info,
      p_module => g_module,
      p_action => g_action,
      p_client_info => g_client_info,
      p_params => g_params,
      p_trace_level => g_trace_level,
      p_trace_context => g_context);
      
    pit_call_stack.long_op(
      p_target => 'UnitTest',
      p_sofar => 50,
      p_total => 100,
      p_units => 'Ticks',
      p_op_name => 'FOO.MY_FUNCTION');
      
    open l_cursor for 
      select *
        from v$session_longops
       where sid = sys_context('USERENV', 'SID')
         and sofar = 50
         and totalwork = 100
         and opname = 'FOO.MY_FUNCTION'
         and units = 'Ticks'
         and target_desc = 'UnitTest';
    ut.expect(l_cursor).not_to_be_empty;
  end long_op_params;

end ut_pit_call_stack;
/
