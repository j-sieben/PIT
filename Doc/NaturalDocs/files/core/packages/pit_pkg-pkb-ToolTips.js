NDContentPage.OnToolTipsLoaded({4:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Used to log a state along with an ID and a severity</div></div>",8:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Adapter code to be injected into the PIT installation. Detects session id and username</div></div>",15:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Basic array of MESSAGE_TYPE parameters</div></div>",17:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">List type of MESSAGE_TYPE, used to collect messages on a stack</div></div>",19:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Array of up to 50 entries of type &lt;ora_name_type&gt;.&nbsp; Is used to pass in a variable&nbsp; list of parameter values</div></div>",30:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Table of msg_param instances.</div></div>",32:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">List type of PIT_MODULE_META</div></div>",42:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Abstract output module for PIT.</div></div>",53:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Core message type. Is used to collect the message, severity and other useful information around messages</div></div>",58:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Is used to collect a call stack entry</div></div>",125:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Record to store log and trace settings</div></div>",127:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Record to grant access to a translatable item</div></div>",163:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">List of output modules of type PIT_MODULE, indexed by pit_util.ora_name_type.</div></div>",165:"<div class=\"NDToolTip TType LSQL\"><div class=\"TTSummary\">Subtype of VARCHAR2, limited to 64 byte.</div></div>",212:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype212\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> copy_context_to_global(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_context_name&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Reads actual context settings into G_CONTEXT and decides whether a change in the settings has occurred.</div></div>",215:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype215\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> set_context_temporarily(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_old_context&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">out nocopy</span> pit_util.context_type,</td></tr><tr><td class=\"PName first\">p_new_context&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.context_type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Method to persist existings context settings in &lt;P_OLD_CONTEXT&gt; and set the active context according to the settings.</div></div>",216:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype216\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> reset_temporarily_set_context(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_context&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.context_type</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Method to reset a temporarlily set context back to its original settings.&nbsp; Is used to reset a temporarily context switch back. Used in conjunction with SET_CONTEXT_TEMPORARILY</div></div>",222:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype222\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">procedure</span> load_adapter</div></div><div class=\"TTSummary\">Loads and instantiates an adapter to read client information.</div></div>",240:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype240\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> log_state(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_params,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_severity&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_message_severity.pse_id<span class=\"SHKeyword\">%type</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">See PIT_PKG.log_state</div></div>",242:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype242\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> enter(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_action&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_params,</td></tr><tr><td class=\"PName first\">p_trace_level&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in pls_integer</span>,</td></tr><tr><td class=\"PName first\">p_client_info&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">See PIT_PKG.enter</div></div>",248:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype248\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> handle_error(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_severity&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in pls_integer</span>,</td></tr><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType last\">pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_args,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char,</td></tr><tr><td class=\"PName first\">p_error_code&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_params</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">See PIT_PKG.handle_error</div></div>",336:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype336\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">procedure</span> initialize</div></div><div class=\"TTSummary\">Initialization procedure.</div></div>",338:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype338\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> check_datatype(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_value&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_type&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_format_mask&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_accept_null&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in boolean</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return boolean</span></div></div><div class=\"TTSummary\">Implements a data type check for a given VARCHAR2 value.</div></div>",339:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype339\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> check_log_level_greater_equal(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_log_level&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in pls_integer</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return boolean</span></div></div><div class=\"TTSummary\">Method checks whether the actually valid log level is greater or equal to &lt;P_LOG_LEVEL&gt;.</div></div>",340:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype340\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> check_trace_level_greater_equal(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_trace_level&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in pls_integer</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return boolean</span></div></div><div class=\"TTSummary\">Method checks whether the actually valid trace level is greater or equal to &lt;P_TRACE_LEVEL&gt;.</div></div>",341:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype341\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> enter(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_action&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_params,</td></tr><tr><td class=\"PName first\">p_trace_level&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in pls_integer</span>,</td></tr><tr><td class=\"PName first\">p_client_info&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Traces entering a method and maintains a call stack.</div></div>",342:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype342\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_active_message</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> message_type</div></div><div class=\"TTSummary\">Retrieves the actually instantiated message instance.</div></div>",343:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype343\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> get_message(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_args,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char,</td></tr><tr><td class=\"PName first\">p_error_code&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> message_type</div></div><div class=\"TTSummary\">Returns an instance of type MESSAGE_TYPE. It takes the message_name, constructs an instance of MESSAGE_TYPE and returns the message instance.</div></div>",344:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype344\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> get_message_text(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_args</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return clob</span></div></div><div class=\"TTSummary\">Returns the text of a message. It takes the message_name, constructs an instance of MESSAGE_TYPE and returns the message text.</div></div>",345:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype345\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> get_trans_item(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_pti_pmg_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_message_group.pmg_name<span class=\"SHKeyword\">%type</span>,</td></tr><tr><td class=\"PName first\">p_pti_id&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_translatable_item.pti_id<span class=\"SHKeyword\">%type</span>,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\">msg_args,</td></tr><tr><td class=\"PName first\">p_pti_pml_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_message_language.pml_name<span class=\"SHKeyword\">%type</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> pit_util.translatable_item_rec</div></div><div class=\"TTSummary\">Function to retrieve a PIT translatable item (PTI).</div></div>",346:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype346\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> handle_error(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_severity&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in pls_integer</span>,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_args</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_error_code&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_params</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Handels an error. It takes the message_name and constructs an instance of MESSAGE_TYPE for it.&nbsp; It then calls raises an error with the respective message that can be caught by the exception block.&nbsp; Messages with severity error or fatal have an associated error called &lt;MESSAGE_NAME&gt;_ERR that can be used to capture the error.</div></div>",347:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype347\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> leave(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_trace_level&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in pls_integer</span>,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_params,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_on_error&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in boolean</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\">false</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Traces leaving a method, calculates timing information if requested and maintains a call stack.</div></div>",348:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype348\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> log_event(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_severity&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in pls_integer</span>,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_args</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_error_code&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Logs messages. It takes the message_name and constructs an instance of MESSAGE_TYPE for it.&nbsp; It then calls any log procedure of all active output modules and passes the message.</div></div>",349:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype349\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> log_specific(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char,</td></tr><tr><td class=\"PName first\">p_error_code&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_args,</td></tr><tr><td class=\"PName first\">p_log_threshold&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_message.pms_pse_id<span class=\"SHKeyword\">%type</span>,</td></tr><tr><td class=\"PName first\">p_log_modules&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Logs messages regardless of log settings. It takes the message_name and constructs an instance of MESSAGE_TYPE for it. It then calls any log procedure of all active output modules and passes the message, regardless of the actual log settings.</div></div>",350:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype350\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> log_state(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_params&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_params,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_severity&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_message_severity.pse_id<span class=\"SHKeyword\">%type</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Logs parameters. It expects an instance of MSG_PARAMS, containing variable names and their actual value. Useful if you want to log the state of variables without the context of a method call, fi to debug state within a loop.</div></div>",351:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype351\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> long_op(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_target&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_sofar&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in number</span>,</td></tr><tr><td class=\"PName first\">p_total&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in number</span>,</td></tr><tr><td class=\"PName first\">p_units&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_op_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Sets dbms_application_info.</div></div>",352:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype352\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> notify(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_args,</td></tr><tr><td class=\"PName first\">p_log_threshold&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_message.pms_pse_id<span class=\"SHKeyword\">%type</span>,</td></tr><tr><td class=\"PName first\">p_log_modules&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Notifies output modules.It takes the message_name and constructs an instance of MESSAGE_TYPE for it.&nbsp; It then calls any notify procedure of all active output modules and passes the message.</div></div>",353:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype353\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> print(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in</span> msg_args</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Prints a message to the output modules. Used to pass user information to the view layer.&nbsp; It takes the message_name and constructs an instance of MESSAGE_TYPE for it.&nbsp; It then calls any print procedure of all active output modules and passes the message.</div></div>",354:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype354\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> purge_log(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_date_before&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in date</span>,</td></tr><tr><td class=\"PName first\">p_severity_lower_equal&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in pls_integer</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Purges the message stack after a given point in time.</div></div>",355:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype355\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> raise_error(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_severity&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in pls_integer</span>,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_util.ora_name_type</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_args</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> pit_util.max_sql_char</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_error_code&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Raises an error. It takes the message_name and constructs an instance of MESSAGE_TYPE for it.&nbsp; It then calls raises an error with the respective message that can be caught by the exception block.&nbsp; Messages with severity error or fatal have an associated error called &lt;MESSAGE_NAME&gt;_ERR that can be used to capture the error.</div></div>",357:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype357\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_context</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> pit_util.context_type</div></div><div class=\"TTSummary\">Functon to retrieve the actual context as an instance of pit_util.CONTEXT_TYPE.&nbsp; is called if an external function wishes to persist the actual settings and reset them later</div></div>",358:"<div class=\"NDToolTip TFunction LSQL\"><div class=\"TTSummary\">Procedure to change the settings in the global PIT_CONTEXT.</div></div>",359:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype359\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function</span> get_context_value(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return varchar2</span></div></div><div class=\"TTSummary\">Method to get a context value eplicitly. Is used to retrieves sert values from the context.&nbsp; This allows for maintaining information such as a test flag in a cross session aware manner.</div></div>",360:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype360\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> set_context_value(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_name&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span>,</td></tr><tr><td class=\"PName first\">p_value&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Method to set a context value eplicitly. Is used to persist arbitrary values at the context.&nbsp; This allows for maintaining information such as a test flag in a cross session aware manner.&nbsp; Setting an attribute to NULL eliminates this attribute from the context.</div></div>",361:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype361\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">procedure</span> reset_active_context</div></div><div class=\"TTSummary\">Procedure to reset log settings to the default settings.</div></div>",363:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype363\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_collect_least_severity</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> binary_integer</div></div><div class=\"TTSummary\">Method to retrieve the actually least severity during collect mode.</div></div>",364:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype364\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_collect_mode</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return boolean</span></div></div><div class=\"TTSummary\">Method to read the actually set collection mode.</div></div>",365:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype365\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> set_collect_mode(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_mode&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in boolean</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Procedure to toggle PIT collection mode.</div></div>",366:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype366\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_message_collection</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> pit_message_table</div></div><div class=\"TTSummary\">Method to retrieve the collection of messages raised since setting PIT to collect mode.</div></div>",368:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype368\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_active_modules</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> args <span class=\"SHMetadata\">pipelined</span></div></div><div class=\"TTSummary\">Function to retrieve a list of active modules.</div></div>",369:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype369\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_available_modules</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> args <span class=\"SHMetadata\">pipelined</span></div></div><div class=\"TTSummary\">Function to retrieve a list of available modules. A module is AVAILABLE if it could be initialized succesfully.</div></div>",370:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype370\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> get_modules</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> pit_module_list <span class=\"SHMetadata\">pipelined</span></div></div><div class=\"TTSummary\">Function to retrieve a list of all installed modules.</div></div>",371:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype371\" class=\"NDPrototype\"><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">function</span> report_module_status</div><div class=\"PSection PPlainSection\"><span class=\"SHKeyword\">return</span> args <span class=\"SHMetadata\">pipelined</span></div></div><div class=\"TTSummary\">Function to retrieve status of all modules</div></div>",419:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype419\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> notify(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_message_name&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span>,</td><td></td><td class=\"last\"></td></tr><tr><td class=\"PName first\">p_msg_args&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in</span> msg_args</td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_affected_id&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_log_threshold&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in number</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span>,</td></tr><tr><td class=\"PName first\">p_log_modules&nbsp;</td><td class=\"PType\"><span class=\"SHKeyword\">in varchar2</span></td><td class=\"PDefaultValueSeparator\">&nbsp;<span class=\"SHKeyword\">default</span>&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHKeyword\">null</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Notifies output modules</div></div>",447:"<div class=\"NDToolTip TFunction LSQL\"><div id=\"NDPrototype447\" class=\"NDPrototype WideForm\"><div class=\"PSection PParameterSection PascalStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">procedure</span> set_context(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first\">p_log_level&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in integer</span>,</td></tr><tr><td class=\"PName first\">p_trace_level&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in integer</span>,</td></tr><tr><td class=\"PName first\">p_trace_timing&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in boolean</span>,</td></tr><tr><td class=\"PName first\">p_log_modules&nbsp;</td><td class=\"PType last\"><span class=\"SHKeyword\">in varchar2</span></td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div></div><div class=\"TTSummary\">Sets the trace context for the active session. Overloaded to directly set the context components.</div></div>"});